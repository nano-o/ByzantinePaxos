#lang ivy1.7

# Fast paxos byzantized by roughly following Lamport's "byzantizing" technique.
# Here the fast path succeeds only if all nodes are correct and timely

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}

type node
type value

type byz_quorum # 2f+1 among all nodes
type third_quorum # quorums consisting of f+1 among all nodes

type round
type quorum # f+1 correct nodes

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)

relation is_good(N:node)
relation member(N:node, Q:quorum)
axiom member(N,Q) -> is_good(N)
axiom forall Q1,Q2. exists N. member(N, Q1) & member(N, Q2)

relation byz_member(N:node,Q:byz_quorum)
relation third_member(N:node,Q:third_quorum)
axiom exists Q . forall N . member(N,Q) -> byz_member(N,BQ) # Every byz quorum contains a quorum
axiom exists N . third_member(N,Q) & is_good(N) # There is one good node in a third quorum
axiom exists TQ . forall N . member(N,Q) = third_member(N,TQ) # Quorums are third quorums

individual is_fast(R:round):bool

relation one_a(R:round)
relation one_b(N:node, R:round) 
relation left_rnd(N:node, R:round)
relation proposal(N:node, R:round, V:value)
relation vote(N:node, R:round, V:value)
relation decision(N:node, R:round, V:value)
relation any(N:node, R:round)

after init {
    one_a(R) := false;
    one_b(N,R) := false;
    left_rnd(N,R) := false;
    proposal(N,R,V) := false;
    vote(N,R,V) := false;
    decision(N,R,V) := false;
    any(N,R) := false;
}

action send_1a = {
    # a proposer selects a round and sends a message asking nodes to join the round
    local r:round {
        require r ~= none;
        one_a(r) := true
    }
}

action join_round = {
    # receive 1a and answer with 1b
    local n:node, r:round {
        require r ~= none;
        require one_a(r);
        require ~left_rnd(n,r);

        local maxr:round, v:value {
            # find the maximal vote in a round less than r
            require ((maxr = none & forall MAXR:round,V:value. ~(~le(r,MAXR) & vote(n,MAXR,V))) |
                    (maxr ~= none & ~le(r,maxr) & vote(n,maxr,v) &
                    (forall MAXR:round,V:value. (~le(r,MAXR) & vote(n,MAXR,V)) -> le(MAXR,maxr))
                   ));
            # send the 1b message
            one_b(n,r) := true;
            left_rnd(n,R) := left_rnd(n,R) | ~le(r,R)
        }
    }
}

action propose = {
    local n:node, r:round, q:byz_quorum {
        require r ~= none;
        require ~proposal(n,r,V);
	require ~any(n,r);
        require forall N:node. byz_member(N, q) -> one_b(N,r);

        local maxr:round, v:value {
	    if forall N, MAXR, V . ~(byz_member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V)) { # no votes reported
		if is_fast(r) {
		    any(n,r) := true }
		else {
		    proposal(n,r,v) := true }
	    }
	    else {
	        # no vote reported between maxr and r:
	        require maxr ~= none & ~le(r,maxr) & (forall N, MAXR, V . (byz_member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V)) -> le(MAXR,maxr));
                
	        if ~is_fast(maxr) { 
	            require exists TQ . forall N . third_member(N,TQ) -> proposal(N,maxr,v); # one good node made a proposal; thus v is safe at maxr
	            require forall N,V . byz_member(N,q) & vote(N,maxr,V) -> V = v; # all votes reported at maxr are for v
	            proposal(n,r,v) := true
	        }
	        else {
	            # one good node sent a proposal or an "any" message, thus v is safe at maxr:
	            require (exists TQ . forall N . third_member(N,TQ) -> proposal(N,maxr,v)) | (exists TQ . forall N . third_member(N,TQ) -> any(N,maxr));
	            local v2:value {
	                require
	                (exists TQ . (forall N . third_member(N,TQ) -> byz_member(N,q) & vote(N,maxr,v2))) # a third among q voted for v2, or
	                | (v2 = v & forall V2, TQ . (forall N . third_member(N,TQ) -> byz_member(N,q)) -> (exists N . third_member(N,TQ) & ~vote(N,maxr,V2))); # no value has been voted by a third among q 
	                proposal(n,r,v2) := true;
	            }
	        }
	    }
        }
    }
}

action classic_vote = {
    # receive a 2a and send 2b
    local n:node, v:value, r:round, q:byz_quorum {
        require r ~= none;
	require ~is_fast(r);
        require ~left_rnd(n,r);
	require ~vote(n,r,V);
        require byz_member(N,q) -> proposal(N,r,v);
        vote(n, r, v) := true
    }
}

action fast_vote = {
    # receive a 2a and send 2b
    local n:node, v:value, r:round, q:byz_quorum {
        require r ~= none;
	require is_fast(r);
        require ~left_rnd(n,r);
	require ~vote(n,r,V);
        require byz_member(N,q) -> any(N,r);
        vote(n, r, v) := true
    }
}

action classic_decide = {
    local n:node, r:round, v:value, q:byz_quorum {
        require r ~= none;
	require ~is_fast(r);
        require byz_member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }
}

action fast_decide = {
    local n:node, r:round, v:value {
        require r ~= none;
	require is_fast(r);
        require vote(N, r, v);
        decision(n, r, v) := true
    }
}

export send_1a
export join_round
export propose
export fast_vote
export classic_vote
export classic_decide
export fast_decide

# There is no byzantine action because the invariants below do not say anything about byzantine nodes. Therefore their state can evolve arbitrarily without breaking the invariants.

# safety property:
conjecture (
    is_good(N1) & is_good(N2) &  
    decision(N1,R1,V1) &
    decision(N2,R2,V2)
) -> V1 = V2

# proposals are unique per round
conjecture is_good(N) & proposal(N,R,V1) & proposal(N,R,V2) -> V1 = V2

# only vote for proposed values
conjecture is_good(N) & vote(N,R,V) & ~is_fast(R) -> exists Q . forall N2 . member(N2,Q) -> proposal(N2,R,V)
conjecture is_good(N) & vote(N,R,V) & is_fast(R) -> exists Q . (forall N2 . member(N2,Q) -> proposal(N2,R,V)) | (forall N2 . member(N2,Q) -> any(N2,R))

conjecture is_good(N) & vote(N,R,V1) & vote(N,R,V2) -> V1 = V2
conjecture is_good(N) & any(N,R) -> is_fast(R)
conjecture ~(is_good(N) & proposal(N,R,V) & any(N,R))

# decisions come from quorums of votes:
conjecture is_good(N) & ~is_fast(R) & decision(N,R,V) -> exists Q. forall N2. member(N2, Q) -> vote(N2,R,V)
conjecture is_good(N) & is_fast(R) & decision(N,R,V) -> forall N2. is_good(N2) -> vote(N2,R,V)

# Properties of choosable and proposal
conjecture ~le(R2,R1) & ~is_fast(R1) & is_good(N) & ((proposal(N,R2,V2) & V1 ~= V2) | any(N,R2)) ->
    exists N2. member(N2,Q) & left_rnd(N2,R1) & ~vote(N2,R1,V1)
conjecture ~le(R2,R1) & is_fast(R1) & is_good(N) & ((proposal(N,R2,V2) & V1 ~= V2) | any(N,R2)) ->
    exists N2. is_good(N2) & left_rnd(N2,R1) & ~vote(N2,R1,V1)

# properties of one_b, left_rnd
conjecture is_good(N) & one_b(N,R2) & ~le(R2,R1) -> left_rnd(N,R1)
