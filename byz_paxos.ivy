#lang ivy1.6

module total_order(r) = {
    axiom r(X,X)                        # Reflexivity
    axiom r(X, Y) & r(Y, Z) -> r(X, Z)  # Transitivity
    axiom r(X, Y) & r(Y, X) -> X = Y    # Anti-symmetry
    axiom r(X, Y) | r(Y, X)             # Totality
}

type node
type value
type byzquorum
type round
type quorum

individual none: round
relation le(X:round, Y:round)
instantiate total_order(le)

relation is_good(N:node) # should be used only in the proof!

# quorum axiomatization
# we think of byzantine paxos as an algorithm that ensures that the good nodes simulate non-byzantine paxos, and we prove safety using this view. Therefore we use the concept of a quorum among good nodes (i.e. F+1 among 2F+1) and we define byzantine quorums (i.e. the 2F+1 among 3F+1)
relation member(N:node, Q:quorum)
axiom member(N,Q) -> is_good(N)
axiom forall Q1,Q2. exists N. member(N, Q1) & member(N, Q2)

relation byz_member(N:node,BQ:byzquorum)
axiom exists Q . forall N . member(N,Q) -> byz_member(N,BQ) # Every byz quorum contains a quorum.
# end quorum axiomatization

relation one_a(R:round)
relation one_b(N:node, R:round)
relation left_rnd(N:node, R:round)
relation proposal(N:node, R:round, V:value)
relation vote(N:node, R:round, V:value)
relation decision(N:node, R:round, V:value)

init ~one_a(R)
init ~one_b(N,R)
init ~left_rnd(N,R)
init ~proposal(N,R,V)
init ~vote(N,R,V)
init ~decision(N,R,V)

action send_1a = {
    # a proposer selects a round and sends a message asking nodes to join the round
    local r:round {
        assume r ~= none;
        one_a(r) := true
    }
}

action join_round = {
    # receive 1a and answer with 1b
    local n:node, r:round {
        assume r ~= none;
        assume one_a(r);
        assume ~left_rnd(n,r);

        one_b(n,r) := true;
        left_rnd(n,R) := left_rnd(n,R) | ~le(r,R)
    }
}

# In propose, the model lets good nodes propose different values in the same round (if all values are safe).
# This is because a byzantine leader can send different pre-prepares to different nodes.
action propose = {
    # receive a quorum of 1b's and send a 2a (proposal)
    local n:node, r:round, q:byzquorum {
        assume r ~= none;
        assume ~proposal(n,r,V);
        assume forall N:node. byz_member(N, q) -> one_b(N,r);
        
        local maxr:round, maxv:value {
            assume ((forall N:node,MAXR:round,V:value. ~(byz_member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V))) |
                    ( maxr ~= none &
	              (exists N:node. is_good(N) & proposal(N,maxr,maxv)) & # maxv is safe at maxr
                      (forall N,V . byz_member(N,q) & vote(N,maxr,V) -> V = maxv) & # if there are multiple proposals at maxr, we must make sure that if one was voted for then we use that one
                      (forall N:node,MAXR:round,V:value. (byz_member(N, q) & ~le(r,MAXR) & vote(N,MAXR,V)) -> le(MAXR,maxr)) # there are no proposals above maxr
                   ));
            # propose value v
            proposal(n, r, maxv) := true
        }
        # Note that there seems to be a liveness problem when a byzantine node can report a bogus vote higher than the "real" highest vote. This is not an issue because eventually a quorum of good nodes will be available and this will unblock the situation.
    }
}

action cast_vote = {
    # receive a 2a and send 2b
    local n:node, v:value, r:round, q:byzquorum {
        assume r ~= none;
        assume ~left_rnd(n,r);
        assume byz_member(N,q) -> proposal(N,r,v);
        vote(n, r, v) := true
    }
}

action decide = {
    # get 2b from a quorum
    local n:node, r:round, v:value, q:byzquorum {
        assume r ~= none;
        assume byz_member(N, q) -> vote(N, r, v);
        decision(n, r, v) := true
    }
}

export send_1a
export join_round
export propose
export cast_vote
export decide
# There is no byzantine action because the invariants below do not say anything about byzantine nodes. Therefore their state can evolve arbitrarily without breaking the invariants.

# safety property:
conjecture (
    is_good(N1) &
    is_good(N2) &
    decision(N1,R1,V1) &
    decision(N2,R2,V2)
) -> V1 = V2

# proposals are unique per round
conjecture is_good(N) & proposal(N,R,V1) & proposal(N,R,V2) -> V1 = V2

# only vote for proposed values
conjecture is_good(N) & vote(N,R,V) -> exists Q . forall N2 . member(N2,Q) -> proposal(N2,R,V)

# decisions come from quorums of votes:
conjecture forall R:round, V:value, N:node. is_good(N) & decision(N,R,V) 
  -> exists Q:quorum. forall N2:node. member(N2, Q) -> vote(N2,R,V)

# Properties of choosable and proposal
conjecture ~le(R2,R1) & is_good(N) & proposal(N,R2,V2) & V1 ~= V2 ->
    exists N2. member(N2,Q) & left_rnd(N2,R1) & ~vote(N2,R1,V1)

# properties of one_b, left_rnd
conjecture is_good(N) & one_b(N,R2) & ~le(R2,R1) -> left_rnd(N,R1)
